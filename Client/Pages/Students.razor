@page "/students"
@using UniversityWebApp.Components
@inject HttpClient Http

<PageTitle>Studenti</PageTitle>

<h2>Studenti</h2>

@if (!string.IsNullOrEmpty(apiError))
{
    <div class="alert alert-danger" role="alert">
        @apiError
    </div>
}

<p>Niže je naveden popis studenata upisanih na Sveučilište.</p>

@if (students == null)
{
    <p><em>Učitavam...</em></p>
}
else
{
    <h4>@(isEditing ? "Uređivanje podataka o studentu" : "Dodavanje novog studenta")</h4>
    
    <StudentForm StudentModel="currentStudent" IsEditing="isEditing"
                 OnValidSubmit="HandleValidSubmit" OnCancel="CancelEdit" />

    <hr />

    @if (students.Length > 0)
    {
        <StudentList Students="students" OnEditStudent="EditStudent" OnDeleteStudent="DeleteStudent" />
    }
    else
    {
        <p class="text-center">Sveučilište trenutno nema upisanih studenata.</p>
    }
}

@code {
    private Student[]? students;
    private Student currentStudent = new Student();
    private string? apiError;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        apiError = null;
        try
        {
            students = await Http.GetFromJsonAsync<Student[]>("api/student");
        }
        catch (Exception ex)
        {
            apiError = $"Došlo je do pogreške pri učitavanju studenata: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        apiError = null;
        try
        {
            if (isEditing)
            {
                var response = await Http.PutAsJsonAsync("api/student", currentStudent);
                if (!response.IsSuccessStatusCode)
                {
                    apiError = $"Greška prilikom uređivanja studenta: {response.ReasonPhrase}";
                    return;
                }
                isEditing = false;

                var index = Array.FindIndex(students!, s => s.Id == currentStudent.Id);
                if (index >= 0)
                {
                    students![index] = currentStudent;
                }
            }
            else
            {
                var response = await Http.PostAsJsonAsync("api/student", currentStudent);
                if (!response.IsSuccessStatusCode)
                {
                    apiError = $"Greška prilikom dodavanja studenta: {await response.Content.ReadAsStringAsync()}";
                    return;
                }
                await LoadStudents();
            }
            currentStudent = new Student();
        }
        catch (Exception ex)
        {
            apiError = $"Došlo je do pogreške: {ex.Message}";
        }
    }

    private void EditStudent(Student student)
    {
        isEditing = true;
        apiError = null;
        currentStudent = new Student
        {
            Id = student.Id,
            FirstName = student.FirstName,
            LastName = student.LastName,
            JMBAG = student.JMBAG
        };
    }

    private async Task DeleteStudent(Student student)
    {
        apiError = null;
        try
        {
            var response = await Http.DeleteAsync($"api/student/{student.Id}");
            if (!response.IsSuccessStatusCode)
            {
                apiError = $"Greška pri brisanju studenta: {response.ReasonPhrase}";
                return;
            }
            await LoadStudents();
        }
        catch (Exception ex)
        {
            apiError = $"Došlo je do pogreške pri brisanju: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        currentStudent = new Student();
        apiError = null;
    }
}
