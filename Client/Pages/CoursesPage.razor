@page "/"
@using UniversityWebApp.Components
@inject HttpClient Http
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<PageTitle>Kolegiji</PageTitle>

<h2>Kolegiji</h2>
<p>Niže je naveden popis kolegija na Sveučilištu.</p>

@if (!string.IsNullOrEmpty(apiError))
{
	<div class="alert alert-danger" role="alert">
		@apiError
	</div>
}

<CourseForm CourseModel="currentCourse" IsEditing="isEditing"
			OnValidSubmit="HandleValidSubmit" OnCancel="CancelEdit" />

<hr />

@if (courses == null)
{
	<p><em>Učitavam...</em></p>
}
else if (courses.Length == 0)
{
	<p class="text-center">Sveučilište trenutno nema unesenih kolegija.</p>
}
else
{
	<CourseList Courses="courses" ExpandedCourseId="expandedCourseId"
				OnEditCourse="EditCourse" OnDeleteCourse="DeleteCourse"
				OnToggleEnrollments="ToggleEnrollments" OnError="SetError" />
}

@code {
	private Course[]? courses;
	private Course currentCourse { get; set; } = new Course();
	private int? expandedCourseId = null;
	private bool isEditing = false;
	private string? apiError;

	protected override async Task OnInitializedAsync()
	{
		currentCourse = new Course();
		await LoadCourses();
	}

	private async Task LoadCourses()
	{
		apiError = null;

		try
		{
			courses = await Http.GetFromJsonAsync<Course[]>("api/course");
		}
		catch (Exception ex)
		{
			apiError = $"Došlo je do pogreške pri učitavanju kolegija: {ex.Message}";
		}
	}

	private async Task HandleValidSubmit()
	{
		apiError = null;

		try
		{
			if (isEditing)
			{
				var response = await Http.PutAsJsonAsync("api/course", currentCourse);

				if (!response.IsSuccessStatusCode)
				{
					apiError = $"Greška pri uređivanju kolegija: {response.ReasonPhrase}";
					return;
				}

				isEditing = false;

				var index = Array.FindIndex(courses!, c => c.Id == currentCourse.Id);

				if (index >= 0)
				{
					courses![index] = currentCourse;
				}
			}
			else
			{
				var response = await Http.PostAsJsonAsync("api/course", currentCourse);

				if (!response.IsSuccessStatusCode)
				{
					apiError = $"Greška pri dodavanju kolegija: {await response.Content.ReadAsStringAsync()}";
					return;
				}

				await LoadCourses();
			}

			currentCourse = new Course();
		}
		catch (Exception ex)
		{
			apiError = $"Došlo je do pogreške: {ex.Message}";
		}
	}

	private void EditCourse(Course course)
	{
		isEditing = true;
		apiError = null;
		currentCourse = course;
	}

	private async Task DeleteCourse(Course course)
	{
		apiError = null;
		try
		{
			var response = await Http.DeleteAsync($"api/course/{course.Id}");

			if (!response.IsSuccessStatusCode)
			{
				apiError = $"Greška pri brisanju kolegija: {response.ReasonPhrase}";
				return;
			}

			await LoadCourses();
		}
		catch (Exception ex)
		{
			apiError = $"Došlo je do pogreške pri brisanju: {ex.Message}";
		}
	}

	private void CancelEdit()
	{
		isEditing = false;
		currentCourse = new Course();
		apiError = null;
	}

	private async Task ToggleEnrollments(int courseId)
	{
		expandedCourseId = expandedCourseId == courseId ? null : courseId;
	}

	private void SetError(string errorMessage)
	{
		apiError = errorMessage;
	}
}