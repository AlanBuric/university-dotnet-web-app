@page "/"
@inject HttpClient Http

<PageTitle>Kolegiji</PageTitle>

<h1>Kolegiji</h1>

<p>Niže je naveden popis kolegija na Sveučilištu.</p>

@if (subjects == null)
{
	<p><em>Učitavam...</em></p>
}
else
{
	<h3>@(isEditing ? "Uredi kolegij" : "Dodaj novi kolegij")</h3>
	<p>The Render mode is: @RendererInfo.Name</p>
	<p>Interactive: @RendererInfo.IsInteractive</p>

	@if (!string.IsNullOrEmpty(apiError))
	{
		<div class="alert alert-danger" role="alert">
			@apiError
		</div>
	}

	<EditForm Model="currentSubject" OnValidSubmit="HandleValidSubmit" FormName="SubjectForm">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="mb-3">
			<label for="Name" class="form-label">Naziv</label>
			<InputText id="Name" class="form-control" @bind-Value="currentSubject.Name" />
		</div>

		<button type="submit" class="btn btn-success">
			@(isEditing ? "Spremi promjene" : "Dodaj kolegij")
		</button>
		@if (isEditing)
		{
			<button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Odustani</button>
		}
	</EditForm>

	<hr />

	@if (subjects.Length > 0)
	{
		<table class="table">
			<thead>
				<tr>
					<th>ID</th>
					<th>Naziv</th>
					<th>Radnje</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var subject in subjects)
				{
					<tr>
						<td>@subject.Id</td>
						<td>@subject.Name</td>
						<td>
							<button class="btn btn-primary btn-sm" @onclick="() => EditSubject(subject)">Uredi</button>
							<button class="btn btn-danger btn-sm" @onclick="() => DeleteSubject(subject)">Obriši</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	}
	else
	{
		<p class="text-center">Sveučilište trenutno nema unesenih kolegija.</p>
	}
}

@code {
	private Subject[]? subjects;

	private Subject currentSubject { get; set; } = new Subject();

	private bool isEditing = false;

	private string? apiError;

	protected override async Task OnInitializedAsync()
	{
		currentSubject = new Subject();
		await LoadSubjects();
	}

	private async Task LoadSubjects()
	{
		apiError = null;

		try
		{
			subjects = await Http.GetFromJsonAsync<Subject[]>("api/subject");
		}
		catch (Exception ex)
		{
			apiError = $"Došlo je do pogreške pri učitavanju kolegija: {ex.Message}";
		}
	}

	private async Task HandleValidSubmit()
	{
		apiError = null;

		try
		{
			if (isEditing)
			{
				var response = await Http.PutAsJsonAsync($"api/subject/{currentSubject.Id}", currentSubject);

				if (!response.IsSuccessStatusCode)
				{
					apiError = $"Greška prilikom uređivanja kolegija: {response.ReasonPhrase}";
					return;
				}

				isEditing = false;
			}
			else
			{
				var response = await Http.PostAsJsonAsync("api/subject", currentSubject);

				if (!response.IsSuccessStatusCode)
				{
					apiError = $"Greška prilikom dodavanja kolegija: {await response.Content.ReadAsStringAsync()}";
					return;
				}
			}

			currentSubject = new Subject();
			await LoadSubjects();
		}
		catch (Exception ex)
		{
			apiError = $"Došlo je do pogreške: {ex.Message}";
		}
	}

	private void EditSubject(Subject subject)
	{
		isEditing = true;
		apiError = null;
		currentSubject = new Subject
			{
				Id = subject.Id,
				Name = subject.Name
			};
	}

	private async Task DeleteSubject(Subject subject)
	{
		apiError = null;

		try
		{
			var response = await Http.DeleteAsync($"api/subject/{subject.Id}");

			if (!response.IsSuccessStatusCode)
			{
				apiError = $"Greška prilikom brisanja kolegija: {response.ReasonPhrase}";
				return;
			}

			await LoadSubjects();
		}
		catch (Exception ex)
		{
			apiError = $"Došlo je do pogreške pri brisanju: {ex.Message}";
		}
	}

	private void CancelEdit()
	{
		isEditing = false;
		currentSubject = new Subject();
		apiError = null;
	}
}
